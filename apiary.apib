FORMAT: 1A
HOST: https://operationcode.org/

# Operation Code API Documentation

API endpoints that Operation Code's Rails backend makes available to its React frontend.

## CodeSchool | Collection [/api/v1/code_schools]

### List All CodeSchool Members [GET]

+ Response 200 (application/json)

        [
            {
                "name": "Galvanize",
                "url": "https://new.galvanize.com", "logo": "https://raw.githubusercontent.com/OperationCode/operationcode_frontend/master/src/images/codeSchoolLogos/galvanize.jpg",
                "logo": "https://raw.githubusercontent.com/OperationCode/operationcode_frontend/master/src/images/codeSchoolLogos/DPL_logo.png",
                "full_time": true,
                "hardware_included": false,
                "has_online": false,
                "online_only": false,
                "mooc": false
                "locations":  [
                      {
                          "va_accepted": false,
                          "address1": "44 Tehama Street",
                          "city": "San Francisco",
                          "state": "CA",
                          "zip": 94015
                      },
                      {
                          "va_accepted": true,
                          "address1": "1062 Delaware Street",
                          "city": "Denver",
                          "state": "CO",
                          "zip": 80204
                      },
                  ]
            },
        ]

## CodeSchool | Create [/api/v1/code_schools{?name,url,logo,full_time,hardware_included,has_online,online_only,notes,mooc}]
+ Parameters

    + name (string, required) - The CodeSchool's name
    + url (string, required) - The CodeSchool's url for homepage
    + logo (string, required) - The CodeSchool's logo url
    + full_time (boolean, required) - Are the CodeSchool's courses full time
    + hardware_included (boolean, required) - Is Hardware included with the CodeSchool
    + has_online (boolean, required) - Does the CodeSchool have an online component
    + online_only (boolean, required) - Is the CodeSchool online only?
    + notes (text, optional) - Any additional information about the CodeSchool
    + mooc (boolean, optional) - Does the CodeSchool offer Massive Open Online Courses?

### Create a CodeSchool Member [POST]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

                  {
                      "code_school": {
                      "name": "CoderSchool",
                      "url": "http://www.CoderSchool.vn",
                      "logo": "https://d388w23p6r1vqc.cloudfront.net/img/startups/11852/logo-1457327647.png",
                      "full_time": "false",
                      "hardware_included": "false",
                      "has_online": "true",
                      "online_only": "false"
                      "mooc": "false"
                      }
                  }

  + Response 201 (application/json)

      + Body

              {
                  "code_school": 182
              }

  + Response 422 (application/json)

          {
              errors: "Some error message"
          }

## CodeSchool | Show or Delete [/api/v1/code_schools/{code_school_id}]
+ Parameters

    + code_school_id (number) - ID of the CodeSchool in the form of an integer

### Get an Existing CodeSchool [GET]

+ Response 200 (application/json)

        {
            "id": 180,
            "name": "CoderSchool",
            "url": "http://www.CoderSchool.vn",
            "logo": "https://d388w23p6r1vqc.cloudfront.net/img/startups/11852/logo-1457327647.png",
            "full_time": false,
            "hardware_included": false,
            "has_online": true,
            "online_only": false,
            "created_at": "2017-09-26T06:54:58.607Z",
            "updated_at": "2017-09-26T06:54:58.607Z",
            "notes": null,
            "mooc": false
        }

+ Response 404 (application/json)

        {
            error: 'No such record'
        }

### Delete an Existing CodeSchool [DELETE]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

              {
                  "id": 1
              }

  + Response 200 (application/json)

      + Body

              {
                  status: "ok"
              }

  + Response 422 (application/json)

      + Body

              {
                  errors: "Some error message"
              }

## CodeSchool | Update [/api/v1/code_schools/{code_school_id}{?name,url,logo,full_time,hardware_included,has_online,online_only,notes,mooc}]

+ Parameters

    + name (string, required) - The CodeSchool's name
    + url (string, required) - The CodeSchool's url for homepage
    + logo (string, required) - The CodeSchool's logo url
    + full_time (boolean, required) - Are the CodeSchool's courses full time
    + hardware_included (boolean, required) - Is Hardware included with the CodeSchool
    + has_online (boolean, required) - Does the CodeSchool have an online component
    + online_only (boolean, required) - Is the CodeSchool online only?
    + notes (text, optional) - Any additional information about the CodeSchool
    + mooc (boolean, optional) - Does the CodeSchool offer Massive Open Online Courses?

### Update an Existing CodeSchool [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "code_school": {
                  "name": "CoddderrrSchool"
                }
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Email List Recipients | Create [/api/v1/email_list_recipients{?email}]
+ Parameters

    + email (string, required) - The email address of the OC guest to be added to the OC's email list

### Add a guest (non-user) to the OC's email list [POST]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

                  {
                      "email": "john@gmail.com",
                  }

  + Response 201 (application/json)

      + Body

              {
                  "email": "john@gmail.com",
                  "guest": true
              }

  + Response 422 (application/json)

          {
              errors: "Some error message"
          }

## Event | Collection [/api/v1/events]

### List all Events [GET]

+ Response 200 (application/json)

        [
            {
                "id": 25,
                "name": "Code and Coffee",
                "description": "<p>Have you always wanted to try programming? Are you just getting started and have questions? Or maybe you have some experience under your belt and want to chat with people that get what you're talking about.</p> <p>Join us at Between Friends Coffeshop &amp; Cafe! Drinks and treats provided! Make sure to RSVP so we how many people to prepare for :)</p> ",
                "url": "https://www.meetup.com/MilSpouseCoders-Robins-AFB/events/243869029/",
                "start_date": "2017-10-28T00:00:00.000Z",
                "end_date": "2017-10-28T00:00:00.000Z",
                "address1": "1080 Georgia 96",
                "address2": null,
                "city": "Warner Robins",
                "state": null,
                "zip": null,
                "scholarship_available": null,
                "created_at": "2017-10-16T15:18:12.711Z",
                "updated_at": "2017-10-16T15:18:12.711Z",
                "source_id": "243869029",
                "source_type": "Meetup",
                "source_updated": "49724-07-09T02:30:00.000Z",
                "group": "MilSpouseCoders - Robins AFB"
            }
        ]

+ Response 422 (application/json)

        {
          errors: "Some error message"
        }

## GitHub Statistic | OC Averages [/api/v1/git_hub_statistics/averages{?start_date,end_date}]

+ Parameters

    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Averages Across All Operation Code Repositories [GET]

+ Response 200 (application/json)

        {
            "average_commits_per_user": 25,
            "average_closed_prs_per_user": 3,
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | OC Totals [/api/v1/git_hub_statistics/totals{?start_date,end_date}]

+ Parameters

    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals Across All Operation Code Repositories [GET]

+ Response 200 (application/json)

        {
            "total_repositories": 4,
            "total_closed_pull_requests": 144,
            "total_closed_issues": 50,
            "total_commits": 475,
            "total_users": 31,
            "total_additions": 43848,
            "total_deletions": 35676
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | Totals by Repository [/api/v1/git_hub_statistics/by_repository{?start_date,end_date}]

+ Parameters

    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals Broken Out Repository [GET]

+ Response 200 (application/json)

        {
            "operationcode": {
                "total_closed_pull_requests": 2,
                "total_closed_issues": 1,
                "total_commits": 8,
                "total_users": 2,
                "total_additions": 3,
                "total_deletions": 3
            },
            "operationcode_backend": {
                "total_closed_pull_requests": 32,
                "total_closed_issues": 10,
                "total_commits": 122,
                "total_users": 13,
                "total_additions": 5942,
                "total_deletions": 359
            },
            "operationcode_frontend": {
                "total_closed_pull_requests": 100,
                "total_closed_issues": 30,
                "total_commits": 334,
                "total_users": 21,
                "total_additions": 37806,
                "total_deletions": 35127
            },
            "operationcode_bot": {
                "total_closed_pull_requests": 10,
                "total_closed_issues": 3,
                "total_commits": 11,
                "total_users": 6,
                "total_additions": 97,
                "total_deletions": 187
            }
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | Totals for User [/api/v1/git_hub_statistics/for_user{?git_hub_login,start_date,end_date}]

+ Parameters

    + git_hub_login (string, required) - The GitHub login for the given user (i.e. "hollomancer")
    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals For A Given User [GET]

+ Response 200 (application/json)

        {
            "total_closed_pull_requests": 23,
            "total_closed_issues": 4,
            "total_commits": 11,
            "total_additions": 1248,
            "total_deletions": 408
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | Totals for a User in a Repository [/api/v1/git_hub_statistics/user_in_repository{?git_hub_login,repository,start_date,end_date}]

+ Parameters

    + git_hub_login (string, required) - The GitHub login for the given user (i.e. "hollomancer")
    + repository (string, required) - The name of the GitHub repository (i.e. "operationcode_frontend")
    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals For A Given User in a Given Repository [GET]

+ Response 200 (application/json)

        {
            "total_closed_pull_requests": 23,
            "total_closed_issues": 4,
            "total_commits": 11,
            "total_additions": 1248,
            "total_deletions": 408
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }


## Location | Create [/api/v1/code_schools/:code_school_id/locations{?code_school_id,va_accepted,address1,address2,city,state,zip}]

+ Parameters

    + code_school_id (integer, required) - The Locations CodeSchool
    + va_accepted (boolean, required) - Does the CodeSchool accepted VA?
    + address1 (string, required) - What is the address?
    + address2 (string, optional) - Optional address
    + city (string, required) - What city is the location in?
    + state (string, required) - What state is the location in?
    + zip (integer, required) - What is the zipcode of the location?

### Create a Location Member [POST]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

            {
                location: {
                    code_school_id: 1,
                    va_accepted: true,
                    address1: 2405 Nugget Lane,
                    address2: Suite 302,
                    city: Tallahassee,
                    state: FL,
                    zip: 32303
                }
            }

  + Response 201 (application/json)

      + Body

              {
                  "location": 182
              }

  + Response 422 (application/json)

          {
              errors: "Some error message"
          }

## Location | Delete [/api/v1/code_schools/:code_school_id/locations/:id]

### Delete an Existing Location [DELETE]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

              {
                  "id": 1
              }

  + Response 200 (application/json)

      + Body

              {
                  status: "ok"
              }

  + Response 422 (application/json)

      + Body

              {
                  errors: "Some error message"
              }

## Location | Update [/api/v1/code_schools/:code_school_id/locations/:id?{?code_school_id,va_accepted,address1,address2,city,state,zip}]

+ Parameters

    + code_school_id (integer, required) - The Locations CodeSchool
    + va_accepted (boolean, required) - Does the CodeSchool accepted VA?
    + address1 (string, required) - What is the address?
    + address2 (string, optional) - Optional address
    + city (string, required) - What city is the location in?
    + state (string, required) - What state is the location in?
    + zip (integer, required) - What is the zipcode of the location?

### Update an Existing Location [PATCH]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

    + Body

            {
                "code_school": {
                    code_school_id: school.id,
                    va_accepted: true,
                    address1: 2405 Nugget Lane,
                    address2: Suite 302,
                    city: Tallahassee,
                    state: FL,
                    zip: 32303
                }
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Request | Request a Mentor [/api/v1/requests{?id,user_id,details,language,service_id,requested_mentor_id,status,assigned_mentor_id}]
+ Parameters

    + id (integer, required) - Identification of mentor request in the form of an integer
    + user_id (integer, required) - ID of the user requesting a mentor, the passed in user must be a verified military veteran( i.e. user.verified == true)
    + details (string, optional) - Details of the mentor request in the form of a string
    + language (string, optional) - Primary language of the requesting mentee in the form of a string
    + service_id (integer, optional) - Indentification of the mentorship request in the form of an integer
    + requested_mentor_id (integer, optional) - Requested mentor's id in the form of an integer
    + status (string, optional) - Current fullfillment status in the form on a string
    + assigned_mentor_id (integer, optional) - Assigned mentor'd id in the form of an integer


### Create a New Mentor Request [POST]
+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

    + Body

            {
                "id": 2130,
                "user_id": 4600,
                "details": "I want to type well",
                "language": "English",
                "service_id": 200,
                "requested_mentor_id": 250,
                "status": "Open",
                "assigned_mentor_id": 250
            }

+ Response 201 (application/json)

    + Body

            {
                "id": 2130,
                "user_id": 4600,
                "details": "I want to type well",
                "language": "English",
                "service_id": 200,
                "requested_mentor_id": 250,
                "status": "Open",
                "assigned_mentor_id": 250
            }

+ Response 401 (application/json)

## Mentor | Collection [/api/v1/mentors]

### List All Mentors [GET]

+ Response 200 (application/json)

    + Body

            {
                "mentor": name
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }
 

## Mentor| Show [/api/v1/requests/{id}]
+ Parameters

    + id (integer, required) - Identification of mentor request in the form of an integer


### Show an Exiting Request From User ID [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

+ Response 200 (application/json)

    + Body

            {
                "id": 1234,
                "user_id": 5200,
                "details": "I want to program",
                "language": "English",
                "service_id": 210,
                "requested_mentor_id": 260,
                "status": "Closed",
                "assigned_mentor_id": 260
            }

## Request | Collection [/api/v1/requests]

### Get All Unclaimed Mentor Requests [GET]
+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

+ Response 200 (application/json)

        [
            {
                "id": 251,
                "service_id": 223,
                "language": "English",
                "details": "I want to stop eating crayons",
                "user_id": 1113,
                "assigned_mentor_id": null,
                "requested_mentor_id": 3333,
                "created_at": "2017-09-26T06:54:58.607Z",
                "updated_at": "2017-09-26T06:54:58.607Z",
                "status": "open"
            },
            {   "id":"264"
                "service_id": 243,
                "language": "American Sign Language",
                "details": "I need help interviewing",
                "user_id": 2500,
                "assigned_mentor_id": null,
                "requested_mentor_id": 1250,
                "created_at": "2017-09-26T06:54:58.607Z",
                "updated_at": "2017-09-26T06:54:58.607Z",
                "status": "open"
            }
        ]

+ Response 401 (application/json)

        {
            error: 'Unauthorized'
        }

## Request | Update [/api/v1/requests/{?user_id,id,details,language,service_id,requested_mentor_id,status,assigned_mentor_id}]
+ Parameters

    + user_id (integer, required) - Identification of the User requesting a mentor in the form of an integer
    + id (integer, required) - Identification of the Mentor Request in the form on an integer
    + details (string, optional) - Details of the mentor request in the form of a string
    + language (string, optional) - Primary language of the requesting mentee in the form of a string
    + service_id (integer, optional) - Indentification of the mentorship request in the form of an integer
    + requested_mentor_id (integer, optional) - Requested mentor's id in the form of an integer
    + status (string, optional) - Current fullfillment status in the form on a string
    + assigned_mentor_id (integer, optional) - Assigned mentor'd id in the form of an integer

### Update an Existing Mentor Request [PATCH]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

    + Body

            {
                "user_id": 5200,
                "id": 4521,
                "details": "I want to program",
                "language": "English",
                "service_id": 210,
                "requested_mentor_id": 260,
                "status": "Closed",
                "assigned_mentor_id": 260
            }

+ Response 200 (application/json)

    + Body

            {
                "user_id": 5200,
                "id":4521,
                "details": "I want to program",
                "language": "English",
                "service_id": 210,
                "requested_mentor_id": 260,
                "status": "Closed",
                "assigned_mentor_id": 260
            }

+ Response 400 (application/json)



## Resource | Collection [/api/v1/resources{?tags}]

### List All Resources [GET]

+ Parameters

    + tags (string, optional) - Comma-separated list of tags to filter the search results on (i.e. "books, videos")

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Free Programming Books",
                "url": "https://github.com/vhf/free-programming-books",
                "category": "Books",
                "language": "multiple",
                "paid": false,
                "notes": "Wiki book on everything computers",
                "votes_count": 3,
                "created_at": "2017-07-01T22:01:48.966Z",
                "updated_at": "2017-07-01T22:01:48.966Z"
            },
            {
                "id": 2,
                "name": "Packtpub free programming books",
                "url": "https://www.packtpub.com/packt/offers/free-learning",
                "category": "Books",
                "language": "multiple",
                "paid": false,
                "notes": null,
                "votes_count": 0,
                "created_at": "2017-07-01T22:01:49.145Z",
                "updated_at": "2017-07-01T22:01:49.145Z"
            }
        ]

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource | Create [/api/v1/resources{?name,url,category,language,paid,notes,tags}]

+ Parameters

    + name (string, required) - Description of the resource
    + url (string, required) - Web address to access the resource
    + category (string, required) - General category grouping the resource
    + language (string, optional) - Programming language that best represents the resource
    + paid (boolean, optional) - If the resource is free or not
    + notes (text, optional) - A broader description of resource, its details, etc.
    + tags (string, optional) - Comma-separated list of tags to filter the search results on (i.e. "books, videos")

### Create a New Resource [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                name: 'Free videos site',
                url: 'free@videos.com',
                category: 'videos',
                language: 'multiple',
                paid: false,
                notes: 'some note',
                tags: "books, videos"
            }

+ Response 201 (application/json)

    + Body

            {
                resource: {
                    id: 1
                },
                tags: [
                    "books",
                    "videos"
                ]
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource | Show [/api/v1/resources/{resource_id}]

+ Parameters

    + resource_id (number) - ID of the Resource in the form of an integer
    

    
### View a Resource's Detail [GET]

+ Response 200 (application/json)

        {
            "id": 53,
            "name": "The Code Player",
            "url": "http://thecodeplayer.com/",
            "category": "Tutorials",
            "language": "multiple",
            "paid": false,
            "notes": null,
            "votes_count": 5,
            "created_at": "2017-07-01T22:01:50.324Z",
            "updated_at": "2017-07-01T22:01:50.324Z"
        }

### Delete an Existing Resource [DELETE]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "resource": {
                    "id": 1
                }
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource | Update [/api/v1/resources/{resource_id}{?name,url,category,language,paid,notes,tags}]

+ Parameters

    + resource_id (number, required) - ID of the Resource in the form of an integer
    + name (string, required) - Description of the resource
    + url (string, required) - Web address to access the resource
    + category (string, required) - General category grouping the resource
    + language (string, optional) - Programming language that best represents the resource
    + paid (boolean, optional) - If the resource is free or not
    + notes (text, optional) - A broader description of resource, its details, etc.
    + tags (string, optional) - Comma-separated list of tags to filter the search results on (i.e. "books, videos")

### Update an Existing Resource [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                id: 1,
                name: 'Free videos site',
                url: 'free@videos.com',
                category: 'videos',
                language: 'multiple',
                paid: false,
                notes: 'some note',
                tags: 'books, videos'
            }

+ Response 200 (application/json)

    + Body

            {
                resource: {
                    id: 1
                },
                tags: [
                    "books",
                    "videos"
                ]
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Scholarships | Collection [/api/v1/scholarships]

### List All Scholarships Available [GET]

+ Response 200 (application/json)

        [
            {
                "id": 5,
                "name": "Full Stack Dev-Ops",
                "location": "29 Palms",
                "terms": "Recent Veterans",
                "open_time": "2017-05-30T15:05:39.242Z",
                "close_time": "2017-10-30T15:05:39.242Z",
                "created_at": "2017-06-30T15:05:39.242Z",
                "updated_at": "2017-06-30T15:05:39.242Z"
            },
            {
                "id": 6,
                "name": "UX to UI for U University",
                "location": "Florida",
                "terms": "Must be Conrad H.",
                "open_time": "2018-01-30T15:05:39.242Z",
                "close_time": "2018-10-30T15:05:39.242Z",
                "created_at": "2017-06-30T15:05:39.242Z",
                "updated_at": "2017-06-30T15:05:39.242Z"
            }
        ]

## Scholarships | Show [/api/v1/scholarships/{scholarship_id}]
+ Parameters

    + scholarship_id (number, required) - ID of the Scholarship in the form of an integer

### Get an Existing Scholarship [GET]

+ Response 200 (application/json)

        {
            "id": 7,
            "name": "Full Stack Dev-Ops",
            "location": "29 Palms",
            "terms": "Recent Veterans",
            "open_time": "2017-05-30T15:05:39.242Z",
            "close_time": "2017-10-30T15:05:39.242Z",
            "created_at": "2017-06-30T15:05:39.242Z",
            "updated_at": "2017-06-30T15:05:39.242Z"
        }

+ Response 404 (application/json)

        {
            error: 'No such record'
        }

## Scholarship Applications | Create [/api/v1/scholarship_applications/{?user_id,scholarship_application,reason,terms_accepted,scholarship_id}]
+ Parameters

    + user_id (integer, required) - ID of the user that is applying for a scholarship in the form of an integer
    + scholarship_application (string, required) - Name of the Scholarship in the form of a string
    + reason (string, optional) - User specified reason for Scholarship Application in the form of a string
    + terms_accepted (boolean, optional) - User specified acknowledgement of Scholarship terms in the form of string
    + scholarship_id (integer, optional) - Unique Id for this scholarship application

### Create a New Scholarship Application [POST]

+ Request (application/json)

    + Body

            {
                "user_id": 1234,
                "scholarship_application": "Scholarship for kids who want to learn how to program",
                "reason": "I want to go to college",
                "terms_accepted": true,
                "scholarship_id":  4
            }

+ Response 201 (application/json)

    + Body

            {
                redirect_to: '/success'
            }

+ Response 400 (application/json)

    + Body

            {
                errors: "Some error message"
            }


## Services | Collection [/api/v1/services]

### List All Services [GET]

+ Response 200 (application/json)

    + Body

            {
                service: "name"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Slack User | Invite [/api/v1/slack_users]

### Invite a User to Slack [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }


## Status | Collection [/api/v1/status]

### Get all Status Codes [GET]

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Tag | Collection [/api/v1/tags]

### List All Tags [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "name": "books",
                "taggings_count": 0
            },
            {
                "id": 2,
                "name": "videos",
                "taggings_count": 0
            }
        ]

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Team Member | Collection [/api/v1/team_members]

### List All Team Members [GET]

+ Response 200 (application/json)

        [
            {
                "description": "Worked for lots of successful companies.",
                "group": "board",
                "id": 65,
                "image_src": "images/rick_rein.jpg",
                "name": "Rick Rein",
                "role": "CTO",
                "created_at": "2017-06-30T15:05:39.242Z",
                "updated_at": "2017-06-30T15:05:39.242Z"
            },
            {
                "description": "Worked for lots of other successful companies.",
                "group": "team",
                "id": 66,
                "image_src": "images/rob_kriner.jpg",
                "name": "Rob Kriner",
                "role": "Director of Marketing",
                "created_at": "2017-06-30T15:05:39.255Z",
                "updated_at": "2017-06-30T15:05:39.255Z"
            }
        ]

## Team Member | Create [/api/v1/team_members{?description,group,image_src,name,role}]

+ Parameters

    + description (string) - The team member's paragraph bio
    + group (string, required) - The team member's group, either 'board', 'team' or 'executive'
    + image_src (string) - The team member's image path
    + name (string, required) - The team member's name
    + role (string, required) - The team member's role title

### Create a New Team Member [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

    + Body

            {
                "description": "He worked at a good and successful company.",
                "group": "board",
                "id": 1,
                "image_src": "images/alex_johnson.jpg",
                "name": "Alex Johnson",
                "role": "Board Member"
            }

+ Response 201 (application/json)

    + Body

            {
                "team_member": 1
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Team Member | Delete [/api/v1/team_members/{team_member_id}]

+ Parameters

    + team_member_id (number) - ID of the Team Member in the form of an integer

### Delete an Existing Team Member [DELETE]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "id": 1
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Team Member | Update [/api/v1/team_members/{team_member_id}{?description,group,image_src,name,role}]

+ Parameters

    + description (string) - The team member's paragraph bio
    + group (string, required) - The team member's group, either 'board', 'team' or 'executive'
    + image_src (string) - The team member's image path
    + name (string, required) - The team member's name
    + role (string, required) - The team member's role title
    + team_member_id (number) - ID of the Team Member in the form of an integer

### Update an Existing Team Member [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "description": "He worked at a good and successful company.",
                "group": "board",
                "id": 1,
                "image_src": "images/alex_johnson.jpg",
                "name": "Alex Johnson",
                "role": "Board Member"
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## User | Count By Location [/api/v1/users/by_location{?state,zip,city,lat_long,radius}]

### By Location [GET]

+ Parameters

    + state (string, optional) - String of comma-separated state abbreviations, i.e. 'TX', or 'TX, CA'
    + zip (string, optional) - String of comma-separated zip code(s), i.e. '80126', or '80126, 80203'
    + city (string, optional) - A string of a 'City, State, County' (i.e. 'Denver, CO, US')
    + lat_long (integer, optional) - Comma-separated integer latitude and longitude, i.e. 30.285648, -97.742052
    + radius (integer, optional) - Includes results within the radius' distance from the location, in miles.  Works in conjunction with city or lat_long, not zip code. Defaults to 20 miles, if not supplied.

+ Request (application/json)

    + Body

            {
                state: 'TX, CA'
            }

            /*or*/

            {
                zip: '80126, 80203'
            }

            /*or*/

            {
                city: 'Denver, CO, US'
            }

            /*or*/

            {
                city: 'Denver, CO, US',
                radius: 30
            }

            /*or*/

            {
                lat_long: 30.285648, -97.742052
            }

            /*or*/

            {
                lat_long: 30.285648, -97.742052,
                radius: 30
            }

+ Response 200 (application/json)

        {
            user_count: 2
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }
## User | Create [/api/v1/users{?first_name,last_name,email,zip,password,mentor}]

+ Parameters

    + first_name (string, required) - First Name of the user in the form of an string
    + last_name (string, required) - Last Name of the user in the form of an string
    + email (string, required) - Email of the User in the form of a string
    + zip (string, required) - Zipcode of the User in the form of a string
    + password (string, required) - Password of the User in the form on a string
    + mentor (boolean, optional) - Is User requesting mentor in the form of a boolean

### Create new user record [POST]

+ Request (application/json)

    + Body

            {
                first_name: "Mike",
                last_name: "Johnson",
                email: "dreams@operationcode.org",
                zip: "80020",
                mentor: "true"
            }


+ Response 201 (application/json)

        {
            token: Bearer Access-Token
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## User | Reset Password [/api/v1/users/passwords/reset{?email}]

+ Parameters

    + email (string, required) - The email address of the requesting User

### Reset the User's Password  [POST]

+ Request (application/json)

    + Body

            {
                "email": "frank@example.com"
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## User | Total Count [/api/v1/users]

### Total User Count [GET]

+ Request (application/json)

+ Response 200 (application/json)

        {
            user_count: 2
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }
## User | Update [/api/v1/users{?education_level,mentor,scholarship_info,employment_status,company_name,company_role,volunteer,branch_of_service,interests}]

+ Parameters

    + education_level (string, optional) - Users highest level of education in the form of a string
    + mentor (boolean, optional) - Is User requesting mentor in the form of a boolean
    + scholarship_info (boolean, optional) - Is User interested in scholarship info in the form of a boolean
    + employment_status (string, optional) - Users employment status in the form of a string
    + company_name (string, optional) - Users name of employer in the form on a string
    + company_role (string, optional) - Users role at company in the form of a string
    + volunteer (boolean, optional) - Is User wanting to volunteer in the form of a boolean
    + branch_of_service (string, optional) - Users branch of service in the form of a string
    + interests (string, optional) - User interests in the form of a string.

### Update user record [PATCH]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

    + Body

            {
                education_level: "College Graduate" ,
                mentor: "true",
                scholarship_info: "true",
                employment_status: "Employed",
                company_name: "Comcast",
                company_role: "Developer",
                volunteer: "false",
                branch_of_service: "Air Force",
                interests: "Python, Python, Python, Python"
            }

+ Response 200 (application/json)

    + Body

            {
                first_name: "Mike",
                last_name: "Johnson",
                email: "dreams@operationcode.org",
                zip: "80020",
                password: "hunter2",
                mentor: "true",
                education_level: "College Graduate",
                scholarship_info: "true",
                employment_status: "Employed",
                company_name: "Comcast",
                company_role: "Developer",
                volunteer: "false",
                branch_of_service: "Air Force",
                interests: "Python, Python, Python, Python"
            }

+ Response 422 (application/json)

    + Body

            {
                errors: "Some error message"
            }

## User | Verify [/api/v1/users/profile/verify{?access_token}]

+ Parameters

    + access_token (string, required) - User verified access token through Id.me in the form of a string

### Verifies a user's military affiliation status through ID.me [POST]

+ Request (application/json)

    + Body

            {
                access_token: "access token"
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok",
                verified: "verified"
            }

+ Response 422 (application/json)

    + Body

            {
                errors: "Some error message"
            }


## Vote | Create [/api/v1/resources/{resource_id}/votes{?user_id}]

+ Parameters

    + resource_id (number, required) - ID of the Resource the User is voting on in the form of an integer
    + user_id (number, required) - ID of the user that is makig the vote

### Create a New Vote [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "user_id": 1,
                "resource_id": 23
            }

+ Response 201 (application/json)

    + Body

            {
                "vote": 1
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Vote | Delete [/api/v1/resources/{resource_id}/votes/{vote_id}]

+ Parameters

    + resource_id (number) - ID of the Resource the User is voting on in the form of an integer
    + vote_id (number) - ID of the Vote the User is deleting in the form of an integer

### Delete an Existing Vote [DELETE]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "id": 1
            }

+ Response 200 (application/json)

    + Body

            {
                status: "ok"
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }